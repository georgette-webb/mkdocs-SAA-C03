{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Solutions Architect \u2013 SAA-C03","text":"<p>Solutions Architect \u2013 SAA-C03 1</p> <p>Domain 1: Design Secure Architectures 6</p> <p>Task Statement 1: Design secure access to AWS resources 6</p> <p>Designing Secure Access to AWS Resources: 6</p> <p>Importance of AWS Accounts: 6</p> <p>IAM (Identity and Access Management): 6</p> <p>Federated Access and IAM Roles: 6</p> <p>IAM Policies: 6</p> <p>Traceability and Monitoring: 6</p> <p>Testing and Implementation: 6</p> <p>Policies: 7</p> <p>Root Users: 7</p> <p>Task Statement 2: Design secure workloads and applications. 7</p> <p>Task Statement 3: Determine appropriate data security controls. 8</p> <p>Domain 2: Design Resilient Architectures 9</p> <p>Task Statement 1: Design scalable and loosely coupled architectures. 9</p> <p>Understanding Scaling: 9</p> <p>AWS Services for Scaling: 10</p> <p>Focus on Amazon EC2 Auto Scaling: 10</p> <p>Compute Options: 10</p> <p>Choosing AWS Services: 10</p> <p>Storage Options: 10</p> <p>Scaling with AWS Database Services: 10</p> <p>Caching and Scaling: 10</p> <p>RDS Proxy: 10</p> <p>Edge Networking Services: 10</p> <p>AWS Transfer Family: 10</p> <p>Service-Oriented and Microservices Architectures: 11</p> <p>Microservices Architecture: 11</p> <p>Serverless Computing: 11</p> <p>Amazon Lambda: 11</p> <p>Amazon Simple Queue Service (SQS): 11</p> <p>Asynchronous Workflows: 11</p> <p>Loosely Coupled Architectures: 11</p> <p>Decoupling Services: 11</p> <p>Serverless Toolkit: 11</p> <p>Architecture Design: 11</p> <p>Service Knowledge: 12</p> <p>Task Statement 2: Design highly available and/or fault-tolerant architectures. 12</p> <p>High Availability (HA): 12</p> <p>Fault Tolerance: 12</p> <p>Disaster Recovery (DR): 12</p> <p>AWS Services and Reliability: 12</p> <p>Database Services and Failover: 13</p> <p>Backup and Recovery: 13</p> <p>Networking and Connectivity: 13</p> <p>Automation and Resource Integrity: 13</p> <p>Global Architectures and DNS Routing: 13</p> <p>RDS Proxy and Serverless Architectures: 14</p> <p>Continuous Improvement and Monitoring: 14</p> <p>Amazon Polly for High Availability and Fault Tolerance: 14</p> <p>Managed Services and Understanding Global Architecture: 14</p> <p>Domain 3: Design High-Performing Architectures 14</p> <p>Task Statement 1: Determine high-performing and/or scalable storage solutions. 14</p> <p>Storage Types: 14</p> <p>Factors for Choosing Storage: 15</p> <p>AWS Storage Services: 15</p> <p>Operational Support for Scaling: 15</p> <p>Future Storage Needs: 15</p> <p>Key Storage Services: 15</p> <p>S3 Resiliency: 15</p> <p>EBS and Snapshots: 15</p> <p>Amazon EFS: 15</p> <p>Amazon FSx: 15</p> <p>Data Growth Consideration: 15</p> <p>Low-Latency Requirements: 15</p> <p>Performance Optimization: 15</p> <p>Task Statement 2: Design high-performing and elastic compute solutions. 15</p> <p>Designing High-Performing and Elastic Compute Solutions 15</p> <p>Amazon EC2 Instances 15</p> <p>Containers 16</p> <p>Functions (Lambda) 16</p> <p>Architecting for Scalability 16</p> <p>Service Specifics 16</p> <p>Task Statement 3: Determine high-performing database solutions. 16</p> <p>Task and Database Engine Variety 16</p> <p>Database Management Simplified 16</p> <p>Choosing the Right Database Solution 16</p> <p>Deep Knowledge Required 17</p> <p>Database Engine Selection 17</p> <p>Optimizing Database Throughput 17</p> <p>Efficient Connection Management 17</p> <p>Capacity Planning 17</p> <p>Aurora Serverless 17</p> <p>Task Statement 4: Determine high-performing and/or scalable network architectures. 17</p> <p>High-Performing and Scalable Network Architectures: 17</p> <p>Preparation for AWS Solutions Architect Associate Exam: 17</p> <p>Location and Configuration: 17</p> <p>Integration and Data Protection: 17</p> <p>Amazon VPCs and Hybrid Architectures: 18</p> <p>Connectivity Options and Services: 18</p> <p>Routing and Network Performance: 18</p> <p>Data Transfer and Scalability: 18</p> <p>High Availability: 18</p> <p>Understand available services and tools for high availability. 18</p> <p>Continuous Improvement: 18</p> <p>Serverless Solutions: 18</p> <p>Task Statement 5: Determine high-performing data ingestion and transformation solutions. Data Ingestion Fundamentals: 18</p> <p>Data Ingestion Patterns: 18</p> <p>Streaming Data Handling: 19</p> <p>Data Transformation and Optimization: 19</p> <p>Data Ingestion Services: 19</p> <p>Data Security Measures: 19</p> <p>Domain 4: Design Cost-Optimized Architectures 19</p> <p>Task Statement 1: Design cost-optimized storage solutions. 19</p> <p>Understanding Storage Solutions: 19</p> <p>AWS Storage Options: 19</p> <p>Amazon S3 for Cost-Effective Storage: 19</p> <p>Monitoring and Cost Management: 20</p> <p>Optimizing EBS Volumes: 20</p> <p>S3 Storage Optimization: 20</p> <p>Data Migration Cost Optimization: 20</p> <p>Requester-Pays Bucket in S3: 20</p> <p>Summary Questions: 20</p> <p>Task Statement 2: Design cost-optimized compute solutions. 20</p> <p>Key to Cost Savings 20</p> <p>AWS Pricing Options 20</p> <p>Considerations for Compute Service Selection 20</p> <p>Right-sizing 21</p> <p>Hybrid Compute Options 21</p> <p>Elasticity 21</p> <p>Choosing the Right Pricing Model 21</p> <p>Matching Storage to Usage 21</p> <p>Continual Improvement 21</p> <p>Load Balancers for Scalability 21</p> <p>Task Statement 3: Design cost-optimized database solutions. 21</p> <p>Strategies for Reducing Database Costs and Improving Availability 21</p> <p>Considerations for Data Store Selection 21</p> <p>Database Service Selection 22</p> <p>Scaling Strategies 22</p> <p>Backup and Recovery Planning 22</p> <p>RDS Engine Selection 22</p> <p>Use of Managed Services 22</p> <p>Task Statement 4: Design cost-optimized network architectures. 22</p> <p>AWS Networking Overview: 22</p> <p>Hybrid Networking: 22</p> <p>Connectivity to AWS Resources: 22</p> <p>VPC and Cross-Region Connectivity: 22</p> <p>Data Transfer Costs: 22</p> <p>Throttling and API Gateway Usage: 23</p> <p>Network Bandwidth and Failover: 23</p> <p>S3 Cost Optimization: 23</p> <p>CloudFront for Cost Optimization: 23</p> <p>Monitoring and Configuration Management: 23</p>"},{"location":"Domain%201/","title":"Index","text":""},{"location":"Domain%201/#domain-1-design-secure-architectures","title":"Domain 1: Design Secure Architectures","text":""},{"location":"Domain%201/#task-statement-1-design-secure-access-to-aws-resources","title":"Task Statement 1: Design secure access to AWS resources","text":""},{"location":"Domain%201/#designing-secure-access-to-aws-resources","title":"Designing Secure Access to AWS Resources:","text":"<ul> <li>Security is a fundamental consideration when designing an AWS architecture.</li> <li>It involves defining how people, tools, and applications access AWS services and data.</li> <li>Access management includes determining who can launch or terminate resources and managing permissions.</li> <li>Different types of cloud environments (public, private, hybrid, multi-cloud) require secure access design.</li> </ul>"},{"location":"Domain%201/#importance-of-aws-accounts","title":"Importance of AWS Accounts:","text":"<ul> <li>Understanding AWS accounts is fundamental.</li> <li>AWS accounts start with a single account root user with full permissions.</li> <li>The account root user can be a security risk and should have multi-factor authentication.</li> <li>Creating new users with limited permissions is recommended for added security.</li> </ul>"},{"location":"Domain%201/#iam-identity-and-access-management","title":"IAM (Identity and Access Management):","text":"<ul> <li>AWS IAM is a global service for securing data in the IAM database.</li> <li>Best practices include securing the account root user, applying the principle of least privilege, and using multi-factor authentication.</li> <li>IAM identities start with no permissions but can have permissions granted.</li> <li>Understanding IAM users, groups, and roles is important for managing access.</li> <li>The principle of least privilege limits the scope of permissions.</li> </ul>"},{"location":"Domain%201/#federated-access-and-iam-roles","title":"Federated Access and IAM Roles:","text":"<ul> <li>Users with identities outside AWS can use IAM roles for federated access.</li> <li>Configuring Active Directory for federated access is crucial.</li> <li>Controlling application access to AWS APIs without hardcoding credentials is essential.</li> </ul>"},{"location":"Domain%201/#iam-policies","title":"IAM Policies:","text":"<ul> <li>You don't need to write advanced policies but should understand how to read and interpret policy documents.</li> <li>IAM policies define permissions for identities and resources.</li> <li>Identity-based policies control what resources an identity can access.</li> <li>Resource-based policies control access to specific resources and their actions.</li> </ul>"},{"location":"Domain%201/#traceability-and-monitoring","title":"Traceability and Monitoring:","text":"<ul> <li>Traceability helps monitor, alert, and audit actions and changes to AWS resources.</li> <li>Integration of log and metric collection is important for real-time monitoring.</li> <li>Insight into access to account resources and data is crucial for security.</li> <li>Knowledge of AWS Control Tower, AWS Organizations, and service control policies is essential for security design.</li> </ul>"},{"location":"Domain%201/#testing-and-implementation","title":"Testing and Implementation:","text":"<ul> <li>Designing security strategies for multiple AWS accounts is a testable skill.</li> <li>AWS Control Tower and AWS Organizations help with security standards and enforcement.</li> <li>Learning and practicing security design and implementation is important.</li> </ul>"},{"location":"Domain%201/#policies","title":"Policies:","text":"<ul> <li>IAM policies define permissions for AWS identities and resources.</li> <li>There are two types of policies: identity-based and resource-based.</li> <li>Identity-based policies are attached to IAM users, groups, or roles, controlling their access to resources.</li> <li>Resource-based policies are attached to specific AWS resources (e.g., S3 buckets, SQS queues) and specify who can access and what actions are allowed on the resource.</li> <li>Understanding policy documents is important; you don't need to write advanced policies for the certification.</li> <li>IAM policies help enforce the principle of least privilege, limiting permissions to what is necessary.</li> </ul>"},{"location":"Domain%201/#root-users","title":"Root Users:","text":"<ul> <li>AWS accounts begin with a single account root user.</li> <li>The account root user has full permissions and is a security risk if compromised.</li> <li>It's recommended to secure the account root user by enabling multi-factor authentication (MFA).</li> <li>Permissions for the account root user cannot be changed or modified.</li> <li>Creating additional IAM users with limited permissions is a safer practice than using the account root user.</li> <li>Using the principle of least privilege, assign permissions based on user roles and responsibilities to limit potential risks.</li> </ul>"},{"location":"Domain%201/#task-statement-2-design-secure-workloads-and-applications","title":"Task Statement 2: Design secure workloads and applications.","text":"<ul> <li>It emphasizes secure access to AWS services, including resource launch and termination, access management, permissions, and more.</li> <li>Understanding Amazon Virtual Private Cloud (Amazon VPC) is fundamental, with distinctions between default and custom VPCs.</li> <li>Amazon VPC is a regional service, and subnets within VPCs are Availability Zone resilient.</li> <li>Key elements of securing VPC architectures include security groups, network access control lists, route tables, and NAT gateways.</li> <li>Knowledge of networking fundamentals, protocols, CIDR, subnetting, routing, and gateways is important.</li> <li>Understanding network segmentation, public and private subnets, and their differences is crucial.</li> <li>Routing mechanisms within a VPC, including route tables, are essential for secure traffic flow.</li> <li> <p>Designing secure access for on-premises traffic through VPNs and selecting appropriate components like PrivateLink, peering, transit gateways, and Direct Connect is important.</p> </li> <li> <p>AWS endpoints and endpoint services, such as PrivateLink, enable secure access to AWS public services without exposing them to the internet.</p> </li> <li>Securing external connections using AWS Site-to-Site VPNs, AWS Client VPN, and Direct Connect requires capacity, security, and resilience considerations.</li> <li>Security best practices for data protection, including personally identifiable information (PII), involve services like Amazon Macie, Amazon Cognito, and Amazon GuardDuty.</li> <li>Understanding Cognito user pools, identity pools, and single sign-on (SSO) is necessary.</li> <li>Firewalls and proxy servers are integrated with security services like AWS Shield, AWS WAF, AWS IAM Identity Center, AWS Secrets Manager, and AWS Systems Manager Parameter Store.</li> <li>Shield Standard and Shield Advance have different capabilities for DDoS and SQL injection attack prevention.</li> <li>Choosing the right service for specific requirements, such as AWS Secrets Manager for secret storage, is essential.</li> <li>AWS WAF is limited to certain AWS services like application load balancers, Amazon API Gateway, and Amazon CloudFront.</li> </ul>"},{"location":"Domain%201/#task-statement-3-determine-appropriate-data-security-controls","title":"Task Statement 3: Determine appropriate data security controls.","text":"<ul> <li>Data security is a critical focus area, whether data is in transit or at rest.</li> <li>Implementing the principle of least privilege is essential to limit access to those who need it and only to the required degree.</li> <li>Two types of encryption are crucial: encryption at rest and encryption in transit.</li> <li>Encryption at rest protects against unauthorized access and theft and is typically used when only one party is involved.</li> <li>Encryption in transit protects data during transfer between two or more parties.</li> <li>Key terms and concepts include plaintext, algorithm, key, and ciphertext.</li> <li>Symmetric and asymmetric encryption are two types of encryption.</li> <li>Knowledge of methods for securing data at rest, managing encryption keys, and key rotation is important.</li> <li>Understanding access policies for encryption keys and the differences between various services is necessary.</li> <li>AWS Certificate Manager is used for encrypting data in transit, and certificates must be renewed.</li> <li>Amazon S3 offers encryption at rest and in transit, with client-side and server-side encryption options.</li> <li>Different server-side encryption choices include customer-provided keys, S3-managed keys, and customer master keys in AWS KMS.</li> <li> <p>Compliance requirements must be met, and AWS Artifact provides security and compliance reports.</p> </li> <li> <p>Data retention, classification, and data recovery are important considerations.</p> </li> <li>Not all data is equal, so proper data classification is essential.</li> <li>Layering multiple security controls (preventative and detective) is crucial for defense in depth.</li> <li>Data protection strategies should align with architecture and requirements.</li> <li>Understanding how various AWS services handle data protection, performance implications, and key management is essential.</li> <li>Protecting data based on access patterns and using policies is important, especially in services like S3.</li> <li>Disaster recovery strategies in AWS range from backups to multi-site active-active solutions.</li> <li>AWS Backup and various AWS services offer backup and restore capabilities.</li> <li>AWS Storage Gateway is a service for hybrid environments.</li> <li>Data security patterns and AWS security controls should be considered in data protection designs.</li> </ul>"},{"location":"Domain%202/","title":"Index","text":""},{"location":"Domain%202/#domain-2-design-resilient-architectures","title":"Domain 2: Design Resilient Architectures","text":""},{"location":"Domain%202/#task-statement-1-design-scalable-and-loosely-coupled-architectures","title":"Task Statement 1: Design scalable and loosely coupled architectures.","text":"<ul> <li>Designing scalable and loosely coupled architectures is important for resilient systems.</li> <li>Scaling can be vertical (increasing individual resource capacity) or horizontal (adding more resources).</li> <li>Elasticity uses automation and horizontal scaling to match capacity with demand.</li> <li>AWS provides tools like launch configuration and autoscaling for elasticity.</li> <li>Differentiate between horizontal and vertical scaling and know how to achieve them with AWS services.</li> <li>Understand containers, serverless, and virtualization and when to use them.</li> <li>Recommend appropriate compute, storage, networking, and databases based on requirements.</li> <li>AWS offers purpose-built databases like DynamoDB, RDS, Aurora, and Redshift.</li> <li>Consider Read Replicas, Multi-AZ designs, and caching for database scaling and resiliency.</li> <li>Know AWS caching services such as CloudFront, ElastiCache, and DynamoDB Accelerator.</li> <li>Use RDS Proxy for scalability, resilience, and security.</li> <li>Understand AWS edge networking services like CloudFront, Route 53, and Global Accelerator.</li> <li>AWS Transfer Family automates file processing workflows without managing infrastructure.</li> <li>The exam tests the ability to build highly scalable and reliable workloads using service-oriented or microservices architectures.</li> <li>Distributed systems should operate reliably despite data loss or latency in networks.</li> <li>Designing with best practices for workload resilience and recovery.</li> <li>Microservices architecture involves services communicating via well-defined APIs.</li> <li>Different microservices patterns include API-driven, event-driven, and data streaming.</li> <li>AWS offers options for building scalable and fault-tolerant microservices using containers and serverless services.</li> <li>Serverless in AWS means no infrastructure management, automatic scaling, pay-for-value billing, and built-in availability and fault tolerance.</li> <li>Amazon API Gateway scales automatically and can be used with Lambda for serverless applications.</li> <li>Scaling Lambda involves understanding concurrency and transactions.</li> <li>Durable message stores like SQS or DynamoDB can be used for asynchronous workflows.</li> <li>Decoupling in architecture involves components remaining autonomous and unaware of each other.</li> <li>Understand synchronous and asynchronous integration as decoupling techniques.</li> <li>Familiarity with tools like load balancers and Amazon Event Bridge is essential for decoupling.</li> <li>Serverless tools like SQS, API Gateway, and DynamoDB can enhance decoupling mechanisms.</li> <li>Knowledge of AWS services such as API Gateway, Transfer Family, SQS, Secrets Manager, Load Balancers, Fargate, Lambda, ECS, EKS, and more is important for this task.</li> <li>Design appropriate architectures based on use cases, considering patterns like event-driven, microservices, and multi-tiered architectures.</li> </ul>"},{"location":"Domain%202/#understanding-scaling","title":"Understanding Scaling:","text":"<ul> <li>Scaling refers to the ability of a system to adjust its capacity based on demand, either increasing or decreasing resources.</li> <li>There are two primary scaling methods: vertical scaling (scaling up by adding resources to an existing instance) and horizontal scaling (scaling out by adding more instances).</li> <li>Elasticity involves using automation and horizontal scaling to match capacity with demand, allowing resources to increase or decrease as needed.</li> </ul>"},{"location":"Domain%202/#aws-services-for-scaling","title":"AWS Services for Scaling:","text":"<ul> <li>AWS provides services like launch configuration and autoscaling to dynamically adjust the number of resources based on demand.</li> <li>Autoscaling optimizes environments for performance, operational excellence, and cost optimization, aligning with the pillars of the AWS Well-Architected Framework.</li> </ul>"},{"location":"Domain%202/#focus-on-amazon-ec2-auto-scaling","title":"Focus on Amazon EC2 Auto Scaling:","text":"<ul> <li>Understand the capabilities of AWS Auto Scaling and Amazon EC2 Auto Scaling.</li> <li>Be familiar with different types of scaling policies that can be applied in Amazon EC2 Auto Scaling.</li> </ul>"},{"location":"Domain%202/#compute-options","title":"Compute Options:","text":"<ul> <li>Recognize the options for running compute workloads in the cloud, including containers, serverless, and virtual instances in EC2.</li> <li>Understand when to choose one option over another based on specific workload requirements.</li> </ul>"},{"location":"Domain%202/#choosing-aws-services","title":"Choosing AWS Services:","text":"<ul> <li>Know how to recommend the appropriate AWS services for compute, storage, networking, and databases based on workload requirements.</li> <li>For example, understand the optimal instance types and deployment configurations for high-performance computing (HPC) workloads.</li> </ul>"},{"location":"Domain%202/#storage-options","title":"Storage Options:","text":"<ul> <li>Be aware of the various storage options available on AWS, including purpose-built databases like DynamoDB, RDS, Amazon Aurora, and Amazon Redshift.</li> </ul>"},{"location":"Domain%202/#scaling-with-aws-database-services","title":"Scaling with AWS Database Services:","text":"<ul> <li>Understand how scaling can be managed using AWS database services.</li> <li>Consider the use of Read Replicas and Multi-AZ designs for resiliency and performance.</li> </ul>"},{"location":"Domain%202/#caching-and-scaling","title":"Caching and Scaling:","text":"<ul> <li>Recognize the role of caching in scaling and improving application performance.</li> <li>AWS services for caching include Amazon CloudFront, ElastiCache, and DynamoDB Accelerator.</li> </ul>"},{"location":"Domain%202/#rds-proxy","title":"RDS Proxy:","text":"<ul> <li>Know how to use RDS Proxy to enhance scalability, resilience to database failures, and security.</li> </ul>"},{"location":"Domain%202/#edge-networking-services","title":"Edge Networking Services:","text":"<ul> <li>Understand the use of AWS edge networking services like CloudFront, Route 53, and Global Accelerator for secure data transmission, reduced latency, and improved application access control.</li> </ul>"},{"location":"Domain%202/#aws-transfer-family","title":"AWS Transfer Family:","text":"<ul> <li>Learn about AWS Transfer Family for managing file processing workflows without the need to host and manage your own infrastructure.</li> <li>Understand its scalability features.</li> </ul>"},{"location":"Domain%202/#service-oriented-and-microservices-architectures","title":"Service-Oriented and Microservices Architectures:","text":"<ul> <li>Comprehend the concepts of service-oriented architecture (SOA) and microservices architecture.</li> <li>Distributed systems require reliable operation despite data loss or latency in networks.</li> <li>Ensure components in distributed systems do not negatively impact each other or the workload.</li> </ul>"},{"location":"Domain%202/#microservices-architecture","title":"Microservices Architecture:","text":"<ul> <li>Microservices communicate over well-defined APIs.</li> <li>There are different patterns for building microservices, including API-driven, event-driven, and data streaming.</li> <li>AWS offers options such as containers and serverless services to build highly scalable and fault-tolerant microservices architectures.</li> </ul>"},{"location":"Domain%202/#serverless-computing","title":"Serverless Computing:","text":"<ul> <li>Serverless is an operational model in AWS with no infrastructure management.</li> <li>Serverless services automatically scale based on consumption and offer pay-for-value billing.</li> <li>Amazon API Gateway scales automatically, making it suitable for various API use cases.</li> </ul>"},{"location":"Domain%202/#amazon-lambda","title":"Amazon Lambda:","text":"<ul> <li>Lambda is a serverless event-driven compute service for running code without server provisioning.</li> <li>Understanding concurrency and transactions is crucial for scaling Lambda functions.</li> </ul>"},{"location":"Domain%202/#amazon-simple-queue-service-sqs","title":"Amazon Simple Queue Service (SQS):","text":"<ul> <li>SQS can handle high throughput and is scaled horizontally by adding more message producers and consumers.</li> <li>It can be used to decouple and scale microservices, distributed systems, and serverless applications.</li> </ul>"},{"location":"Domain%202/#asynchronous-workflows","title":"Asynchronous Workflows:","text":"<ul> <li>Asynchronous workflows using durable message stores like SQS or DynamoDB can separate request ingestion and processing for better scaling and user experience.</li> </ul>"},{"location":"Domain%202/#loosely-coupled-architectures","title":"Loosely Coupled Architectures:","text":"<ul> <li>Loosely coupled architectures involve components that remain autonomous and unaware of each other.</li> <li>Decoupling techniques can be synchronous or asynchronous.</li> </ul>"},{"location":"Domain%202/#decoupling-services","title":"Decoupling Services:","text":"<ul> <li>Understanding how to use decoupling services like load balancers, Amazon Event Bridge, and serverless tools is essential.</li> </ul>"},{"location":"Domain%202/#serverless-toolkit","title":"Serverless Toolkit:","text":"<ul> <li>AWS services such as SQS, API Gateway, and DynamoDB can be deployed using serverless approaches to enhance flexibility and decoupling capabilities.</li> </ul>"},{"location":"Domain%202/#architecture-design","title":"Architecture Design:","text":"<ul> <li>Given specific use cases and requirements, you should be able to design the appropriate architecture type, such as event-driven, microservices, or multi-tiered architectures.</li> <li>Choose the architecture that best aligns with user needs.</li> </ul>"},{"location":"Domain%202/#service-knowledge","title":"Service Knowledge:","text":"<ul> <li>Deep knowledge of various AWS services is required, including API Gateway, AWS Transfer Family, SQS, Secrets Manager, Application Load Balancers, Fargate, Lambda, Amazon Elastic Container Service (ECS), Elastic Kubernetes Service (EKS), and more.</li> </ul>"},{"location":"Domain%202/#task-statement-2-design-highly-available-andor-fault-tolerant-architectures","title":"Task Statement 2: Design highly available and/or fault-tolerant architectures.","text":""},{"location":"Domain%202/#high-availability-ha","title":"High Availability (HA):","text":"<p>Designing for high availability means designing for minimal downtime.</p> <ul> <li>The goal of high availability is to reduce outages and stay operational, fast and automatic recover is best, but there is usually downtime even if its very brief.</li> <li>HA ensures systems are up and running as much as possible.</li> <li>It allows for rapid replacement or recovery of failed components.</li> <li>HA aims to minimize system downtime but doesn't eliminate it entirely.</li> <li>Examples of HA include failover mechanisms or redundant servers.</li> <li>The goal is to reduce outages and ensure fast, automatic recovery.</li> </ul>"},{"location":"Domain%202/#fault-tolerance","title":"Fault Tolerance:","text":"<p>Designing for fault tolerance means designing for zero downtime.</p> <ul> <li>Fault tolerant designs operate to minimize failures and to continue to operate through failure and these system designs are usually more expensive than high availability designs.</li> <li>Fault tolerance enables a system to continue operating despite component failures.</li> <li>It typically involves redundant components, such as active servers, to eliminate downtime.</li> <li>Fault-tolerant designs are often more expensive than HA designs.</li> </ul>"},{"location":"Domain%202/#disaster-recovery-dr","title":"Disaster Recovery (DR):","text":"<p>Designing for disaster recovery means designing for systems to operate through a disaster.</p> <ul> <li>DR focuses on planning and actions needed in case of a disaster.</li> <li>Pre-planning and offsite backups are crucial for effective disaster recovery.</li> <li>Regular disaster recovery exercises help ensure smooth recovery in real disasters.</li> <li>AWS global infrastructure can add HA and fault tolerance, but you still need a DR plan.</li> <li>Consider resource redundancy, data replication, traffic management, and failure detection.</li> </ul>"},{"location":"Domain%202/#aws-services-and-reliability","title":"AWS Services and Reliability:","text":"<ul> <li>Evaluate AWS services to improve architectural reliability.</li> <li>Legacy applications may require special consideration.</li> <li>Consider highly available configurations and disaster recovery strategies.</li> <li>Assess components' failure impact and mitigation measures.</li> <li>Define Recovery Time Objective (RTO) and Recovery Point Objective (RPO).</li> <li>RPO defines how often data needs to be backed up, while RTO sets the maximum acceptable downtime.</li> <li>Consider active/passive, active/active, and multi-site deployment styles.</li> <li>Backup plans should meet RTO and RPO requirements.</li> <li>AWS services like Amazon S3, EFS, and Amazon FSx can be used for storage.</li> <li>Understand the availability, encryption options, and limitations of these services.</li> <li>Explore AWS database services' capabilities for disaster recovery.</li> </ul>"},{"location":"Domain%202/#database-services-and-failover","title":"Database Services and Failover:","text":"<ul> <li>RDS offers Multi-AZ deployment for automatic failover and downtime reduction.</li> <li>Amazon Aurora global database provides cross-region failover capabilities.</li> <li>Amazon DynamoDB global tables offer replication across regions.</li> </ul>"},{"location":"Domain%202/#backup-and-recovery","title":"Backup and Recovery:","text":"<ul> <li>Various backup and recovery options exist for these services.</li> <li>Understand disaster recovery strategies like backup and restore, pilot light, warm standby, and active/active failover.</li> <li>AWS Elastic Disaster Recovery can be used for on-premises and cloud-based applications.</li> <li>For Amazon EC2 applications, use AMIs and EC2 Image Builder in disaster recovery strategies.</li> </ul>"},{"location":"Domain%202/#networking-and-connectivity","title":"Networking and Connectivity:","text":"<ul> <li>Networking concepts and AWS networking services are crucial for high availability and fault-tolerant architectures.</li> <li>Understand how routing tables work, VPC peering connections, AWS Transit Gateways, AWS Site-to-Site VPNs, AWS Direct Connect locations, AWS Direct Connect Gateways, and Amazon Route 53 Resolver.</li> <li>Keep in mind the capabilities and limitations of different services to meet your requirements.</li> </ul>"},{"location":"Domain%202/#automation-and-resource-integrity","title":"Automation and Resource Integrity:","text":"<ul> <li>Use services like Elastic Beanstalk, CloudFormation, OpsWorks, ECS, and EKS for automated deployments.</li> <li>Amazon Inspector and Amazon CodeGuru help check infrastructure and code vulnerabilities.</li> <li>Implement elastic load balancers and EC2 Auto Scaling groups to handle failures.</li> </ul>"},{"location":"Domain%202/#global-architectures-and-dns-routing","title":"Global Architectures and DNS Routing:","text":"<ul> <li>Amazon Route 53 DNS routing capabilities support global architectures and failover routing.</li> <li>Global Accelerator enhances application availability and performance.</li> </ul>"},{"location":"Domain%202/#rds-proxy-and-serverless-architectures","title":"RDS Proxy and Serverless Architectures:","text":"<ul> <li>RDS Proxy improves scalability, resilience, and security for RDS and Aurora databases.</li> <li>RDS Proxy reduces failover times and integrates with Secrets Manager and IAM.</li> <li>Serverless applications can benefit from RDS Proxy for efficient database connections.</li> </ul>"},{"location":"Domain%202/#continuous-improvement-and-monitoring","title":"Continuous Improvement and Monitoring:","text":"<ul> <li>Track and respond to metrics using Amazon CloudWatch and AWS X-Ray.</li> <li>Initiate automated actions based on key metrics using CloudWatch alarms.</li> <li>Use EventBridge for near real-time responses to environment changes.</li> </ul>"},{"location":"Domain%202/#amazon-polly-for-high-availability-and-fault-tolerance","title":"Amazon Polly for High Availability and Fault Tolerance:","text":"<ul> <li>Amazon Polly can be used in scenarios like IT service request categorization for improved availability.</li> <li>It adds spoken output and can enhance self-service in Amazon Connect contact center services.</li> </ul>"},{"location":"Domain%202/#managed-services-and-understanding-global-architecture","title":"Managed Services and Understanding Global Architecture:","text":"<ul> <li>Many AWS managed services are built for specific purposes, offering high availability.</li> <li>Understand AWS Global Architecture, Amazon Comprehend, backup strategies, RDS Proxy, and AWS X-Ray for fault-tolerant architectures.</li> </ul>"},{"location":"Domain%203/","title":"Index","text":""},{"location":"Domain%203/#domain-3-design-high-performing-architectures","title":"Domain 3: Design High-Performing Architectures","text":""},{"location":"Domain%203/#task-statement-1-determine-high-performing-andor-scalable-storage-solutions","title":"Task Statement 1: Determine high-performing and/or scalable storage solutions.","text":"<ul> <li>AWS offers various storage solutions, including object, block, and file storage.</li> <li>Selecting the right storage solution depends on factors like access method, access patterns, throughput, frequency, availability, and durability requirements.</li> <li>Different AWS storage services, such as EBS, S3, and EFS, have varying scalability and performance characteristics.</li> <li>EBS volumes require manual scaling by modifying volume type, size, and IOPS capacity.</li> <li>EFS automatically scales as you add or remove files from the file system.</li> <li>Understanding the operational support needed for storage scaling is crucial.</li> <li>Consider future storage needs when choosing a storage solution.</li> <li>Key information for storage services like S3, EBS, EFS, Amazon FSx, and Storage Gateway.</li> <li>S3 is globally resilient and can tolerate Availability Zone failures.</li> <li>EBS volume types and snapshots for backups and disaster recovery.</li> <li>Amazon EFS for shared file systems with performance options.</li> <li>Amazon FSx for Windows and Lustre file systems.</li> <li>Consider data growth and capacity upper bounds when selecting a storage solution.</li> <li>Different AWS storage services for low-latency requirements.</li> <li>Configurations and integrations for improving storage performance, including S3 Accelerator and CloudFront caching.</li> <li>Understanding API calls, multi-part uploads, and other features for data uploads and retrievals in S3.</li> </ul>"},{"location":"Domain%203/#storage-types","title":"Storage Types:","text":"<ul> <li>AWS offers three types of storage: object, block, and file.</li> </ul>"},{"location":"Domain%203/#factors-for-choosing-storage","title":"Factors for Choosing Storage:","text":"<ul> <li>Selecting the right storage solution depends on factors like access method, access patterns, throughput, frequency, availability, and durability requirements.</li> </ul>"},{"location":"Domain%203/#aws-storage-services","title":"AWS Storage Services:","text":"<ul> <li>Different AWS storage services have varying scalability and performance characteristics.</li> <li>EBS volumes require manual scaling by modifying volume type, size, and IOPS capacity.</li> <li>EFS automatically scales as you add or remove files from the file system.</li> </ul>"},{"location":"Domain%203/#operational-support-for-scaling","title":"Operational Support for Scaling:","text":"<ul> <li>Understanding the operational support needed for storage scaling is crucial.</li> </ul>"},{"location":"Domain%203/#future-storage-needs","title":"Future Storage Needs:","text":"<ul> <li>Consider future storage needs when choosing a storage solution.</li> </ul>"},{"location":"Domain%203/#key-storage-services","title":"Key Storage Services:","text":"<ul> <li>Key information for storage services like S3, EBS, EFS, Amazon FSx, and Storage Gateway.</li> </ul>"},{"location":"Domain%203/#s3-resiliency","title":"S3 Resiliency:","text":"<ul> <li>S3 is globally resilient and can tolerate Availability Zone failures.</li> </ul>"},{"location":"Domain%203/#ebs-and-snapshots","title":"EBS and Snapshots:","text":"<ul> <li>EBS volume types and snapshots for backups and disaster recovery.</li> </ul>"},{"location":"Domain%203/#amazon-efs","title":"Amazon EFS:","text":"<ul> <li>Amazon EFS for shared file systems with performance options.</li> </ul>"},{"location":"Domain%203/#amazon-fsx","title":"Amazon FSx:","text":"<ul> <li>Amazon FSx for Windows and Lustre file systems.</li> </ul>"},{"location":"Domain%203/#data-growth-consideration","title":"Data Growth Consideration:","text":"<ul> <li>Consider data growth and capacity upper bounds when selecting a storage solution.</li> </ul>"},{"location":"Domain%203/#low-latency-requirements","title":"Low-Latency Requirements:","text":"<ul> <li>Different AWS storage services for low-latency requirements.</li> </ul>"},{"location":"Domain%203/#performance-optimization","title":"Performance Optimization:","text":"<ul> <li>Configurations and integrations for improving storage performance, including S3 Accelerator and CloudFront caching.</li> <li>Understanding API calls, multi-part uploads, and other features for data uploads and retrievals in S3.</li> </ul>"},{"location":"Domain%203/#task-statement-2-design-high-performing-and-elastic-compute-solutions","title":"Task Statement 2: Design high-performing and elastic compute solutions.","text":""},{"location":"Domain%203/#designing-high-performing-and-elastic-compute-solutions","title":"Designing High-Performing and Elastic Compute Solutions","text":"<ul> <li>Scalability and elasticity in AWS depend on the design and selection of AWS services.</li> <li>Compute resources are available in three forms: instances, containers, and functions.</li> </ul>"},{"location":"Domain%203/#amazon-ec2-instances","title":"Amazon EC2 Instances","text":"<ul> <li>EC2 instances come in different families, sizes, and capabilities, including CPU, memory, storage, and network bandwidth.</li> <li>Performance of each EC2 instance type varies, including network bandwidth, resource ratios, and additional features.</li> </ul>"},{"location":"Domain%203/#containers","title":"Containers","text":"<ul> <li>Understand container fundamentals and benefits, focusing on Amazon Elastic Container Service (ECS) and Amazon Kubernetes Service (EKS).</li> <li>ECS offers two types: Amazon EC2 and Fargate for serverless container computing.</li> <li>Integrate other services like application load balancers with containers.</li> </ul>"},{"location":"Domain%203/#functions-lambda","title":"Functions (Lambda)","text":"<ul> <li>Lambda allows running code without EC2 instances.</li> <li>It supports various runtime languages (e.g., Python, Java, NodeJS) and has a 15-minute execution limit.</li> <li>Can be deployed globally with CloudFront for better performance.</li> </ul>"},{"location":"Domain%203/#architecting-for-scalability","title":"Architecting for Scalability","text":"<ul> <li>Architect solutions for independent scaling of compute and application components.</li> <li>Use services like SQS and Elastic Load Balancing to decouple workloads.</li> <li>Utilize CloudWatch metrics, alarms, and dashboards for visibility and scaling.</li> <li>Configure Amazon EC2 Auto Scaling based on CloudWatch alarms.</li> <li>Choose appropriate metrics for scaling, including custom and load balancing-related metrics.</li> </ul>"},{"location":"Domain%203/#service-specifics","title":"Service Specifics","text":"<ul> <li>Some AWS services, like Lambda, are inherently scalable, while others, like EC2, require design considerations.</li> <li>Select EC2 instance types based on application resource needs.</li> <li>Consider the right architecture and services for scalable and performant solutions.</li> <li>Use EC2 with Elastic Load Balancing and EC2 Auto Scaling for highly available and elastic workloads.</li> <li>Understand when to use EC2, Lambda, or container services based on the use case.</li> <li>Be familiar with the benefits and limitations of each compute service in AWS.</li> </ul>"},{"location":"Domain%203/#task-statement-3-determine-high-performing-database-solutions","title":"Task Statement 3: Determine high-performing database solutions.","text":""},{"location":"Domain%203/#task-and-database-engine-variety","title":"Task and Database Engine Variety","text":"<ul> <li>Domain 3 involves determining high-performing database solutions for applications.</li> <li>AWS offers a range of purpose-built database engines: relational, key-value, document, in-memory, graph, time series, and ledger databases.</li> </ul>"},{"location":"Domain%203/#database-management-simplified","title":"Database Management Simplified","text":"<ul> <li>AWS handles tasks such as server provisioning, patching, setup, configuration, backups, and recovery.</li> <li>AWS monitors clusters, ensuring self-healing storage and automated scaling for higher value application development.</li> </ul>"},{"location":"Domain%203/#choosing-the-right-database-solution","title":"Choosing the Right Database Solution","text":"<ul> <li>The optimal database solution depends on factors like availability, consistency, partition tolerance, latency, durability, scalability, and query capability.</li> <li>Different subsystems may use varying database solutions and features to enhance performance.</li> <li>Consider access patterns and alternative storage solutions like graph, time series, or in-memory storage databases.</li> </ul>"},{"location":"Domain%203/#deep-knowledge-required","title":"Deep Knowledge Required","text":"<ul> <li>Exam preparation should go beyond simple identification of database services; understand how they operate.</li> <li>Examples include configuring read replicas for RDS, understanding Amazon Aurora clusters, and data replication.</li> </ul>"},{"location":"Domain%203/#database-engine-selection","title":"Database Engine Selection","text":"<ul> <li>Consider when to use different database engines like PostgreSQL or MySQL based on use cases.</li> <li>DynamoDB excels in consistent, single-digit millisecond performance, especially for high volumes.</li> <li>Choose between RDS MySQL and Aurora MySQL based on regional failover needs.</li> </ul>"},{"location":"Domain%203/#optimizing-database-throughput","title":"Optimizing Database Throughput","text":"<ul> <li>Optimize database throughput with caching services like ElastiCache or DAX.</li> <li>ElastiCache supports Redis and Memcached, while DAX accelerates DynamoDB access.</li> </ul>"},{"location":"Domain%203/#efficient-connection-management","title":"Efficient Connection Management","text":"<ul> <li>RDS Proxy efficiently manages connections to RDS instances, reducing compute and memory stress, enabling scalability.</li> </ul>"},{"location":"Domain%203/#capacity-planning","title":"Capacity Planning","text":"<ul> <li>Understand how to choose the correct instance type and size for your workload.</li> <li>Explore options like RDS instance auto-scaling and storage auto-scaling.</li> </ul>"},{"location":"Domain%203/#aurora-serverless","title":"Aurora Serverless","text":"<ul> <li>Aurora Serverless offers on-demand auto-scaling with cost-effective compute capacity based on application needs.</li> <li>It uses Aurora Capacity Units (ACUs) to manage compute and memory.</li> <li>Aurora Serverless can scale between minimum and maximum ACUs, and it can pause during inactivity to reduce costs.</li> </ul>"},{"location":"Domain%203/#task-statement-4-determine-high-performing-andor-scalable-network-architectures","title":"Task Statement 4: Determine high-performing and/or scalable network architectures.","text":""},{"location":"Domain%203/#high-performing-and-scalable-network-architectures","title":"High-Performing and Scalable Network Architectures:","text":""},{"location":"Domain%203/#preparation-for-aws-solutions-architect-associate-exam","title":"Preparation for AWS Solutions Architect Associate Exam:","text":"<ul> <li>Understand how to select high-performing networking solutions based on workload requirements.</li> <li>Networking fundamentals are crucial for informed decision-making.</li> <li>AWS offers various networking services and solutions for performance optimization.</li> </ul>"},{"location":"Domain%203/#location-and-configuration","title":"Location and Configuration:","text":"<ul> <li>Consider location when deploying networks to reduce latency.</li> <li>Configure and implement networks across Regions, placement groups, and edge services for improved performance.</li> </ul>"},{"location":"Domain%203/#integration-and-data-protection","title":"Integration and Data Protection:","text":"<ul> <li>Integrate storage services, data transfer methods, and networking options.</li> <li>Use network metrics for adaptive networking configurations.</li> <li>Consider infrastructure as code for agility.</li> </ul>"},{"location":"Domain%203/#amazon-vpcs-and-hybrid-architectures","title":"Amazon VPCs and Hybrid Architectures:","text":"<ul> <li>Design and build Amazon VPCs.</li> <li>Secure VPCs and understand their components.</li> <li>Connect Amazon VPCs to on-premises data centers using various options.</li> </ul>"},{"location":"Domain%203/#connectivity-options-and-services","title":"Connectivity Options and Services:","text":"<ul> <li>Select connectivity options based on data volume, compliance, and performance requirements.</li> <li>Explore services like Transit Gateway, AWS CloudHub, PrivateLink, and VPC endpoints.</li> <li>Use gateway endpoints for AWS public services from private instances or subnets.</li> </ul>"},{"location":"Domain%203/#routing-and-network-performance","title":"Routing and Network Performance:","text":"<ul> <li>Understand routing policies and Route 53 functionality.</li> <li>Explore Global Accelerator for improved network performance.</li> <li>Use AWS CloudFront to cache assets closer to end users.</li> </ul>"},{"location":"Domain%203/#data-transfer-and-scalability","title":"Data Transfer and Scalability:","text":"<ul> <li>Choose the right data transfer service based on data volume, type, source, and destination.</li> <li>Focus on scalability for global customer bases.</li> <li>Utilize auto scaling, load balancing, and OSI model layers for load balancers.</li> </ul>"},{"location":"Domain%203/#high-availability","title":"High Availability:","text":"<ul> <li>Follow AWS guidelines to achieve high availability.</li> <li>Avoid single points of failure and use automated monitoring and failover mechanisms.</li> </ul>"},{"location":"Domain%203/#understand-available-services-and-tools-for-high-availability","title":"Understand available services and tools for high availability.","text":""},{"location":"Domain%203/#continuous-improvement","title":"Continuous Improvement:","text":"<ul> <li>Improve scalability by adding services like CloudFront and ElastiCache.</li> <li>Optimize scaling policies and instance sizes for better performance.</li> </ul>"},{"location":"Domain%203/#serverless-solutions","title":"Serverless Solutions:","text":"<ul> <li>Build global, highly scalable serverless solutions.</li> <li>Utilize services like S3 website hosting, Route 53, DynamoDB global tables, CloudFront, and Global Accelerator.</li> </ul>"},{"location":"Domain%203/#task-statement-5-determine-high-performing-data-ingestion-and-transformation-solutions","title":"Task Statement 5: Determine high-performing data ingestion and transformation solutions.","text":"<p>Data Ingestion Fundamentals:</p> <ul> <li>AWS data ingestion involves collecting, curating, and preparing data from source systems for storage, data lakes, and machine learning in AWS.</li> <li>Data movement is crucial, and it should meet performance, latency, scale, security, and governance needs.</li> </ul>"},{"location":"Domain%203/#data-ingestion-patterns","title":"Data Ingestion Patterns:","text":"<ul> <li>Common data ingestion patterns include homogenous and heterogeneous patterns.</li> <li>Cloud-based ETL services like Amazon Athena and Amazon EMR are used for data ingestion.</li> </ul>"},{"location":"Domain%203/#streaming-data-handling","title":"Streaming Data Handling:","text":"<ul> <li>Streaming data can be handled using Amazon Kinesis and Amazon Managed Streaming for Apache Kafka.</li> <li>Kinesis Data Streams is for real-time data streaming with high scalability and durability.</li> <li>Kinesis Data Firehose simplifies capturing, transforming, and loading data streams into AWS data stores.</li> <li>Kinesis Data Analytics provides basic data transformation options.</li> </ul>"},{"location":"Domain%203/#data-transformation-and-optimization","title":"Data Transformation and Optimization:","text":"<ul> <li>Extracted data needs transformation, loading, cataloging, and organization for machine learning and consumption.</li> <li>Services like Amazon EMR, AWS Glue, and AWS Lake Formation optimize data processing.</li> <li>Data lakes on S3 offer agility, flexibility, and centralized data management.</li> </ul>"},{"location":"Domain%203/#data-ingestion-services","title":"Data Ingestion Services:","text":"<ul> <li>AWS provides various services for data ingestion into data lakes, including Kinesis Data Fire Hose, Snow Family, Glue, AWS Data Sync, and more.</li> <li>Different data transfer methods are available for on-premises to cloud migration, including the Snow Family and Amazon Kinesis.</li> <li>AWS Glue is a data integration service for discovering, preparing, moving, and integrating data from multiple sources.</li> </ul>"},{"location":"Domain%203/#data-security-measures","title":"Data Security Measures:","text":"<ul> <li>Security measures for data ingestion include access policies, S3 and KMS encryption, and tagging.</li> <li>IAM user policies control access to data in S3.</li> <li>Encryption keys, such as those provided by KMS, enhance data security.</li> <li>Additional security measures like API Gateway, Cognito, and Cloud HSM can be used for compliance requirements, especially for PII data.</li> </ul>"},{"location":"Domain%204/","title":"Index","text":""},{"location":"Domain%204/#domain-4-design-cost-optimized-architectures","title":"Domain 4: Design Cost-Optimized Architectures","text":""},{"location":"Domain%204/#task-statement-1-design-cost-optimized-storage-solutions","title":"Task Statement 1: Design cost-optimized storage solutions.","text":""},{"location":"Domain%204/#understanding-storage-solutions","title":"Understanding Storage Solutions:","text":"<ul> <li>Knowledge of different storage solutions for various scenarios.</li> <li>Consideration of appropriate storage solutions for specific use cases.</li> <li>Avoiding over-provisioning storage capacity.</li> </ul>"},{"location":"Domain%204/#aws-storage-options","title":"AWS Storage Options:","text":"<ul> <li>Ephemeral storage for low compute-related costs, suitable for short-term data.</li> <li>Amazon EBS for persistent storage with block-level devices and snapshot functionality.</li> <li>Consideration of advantages and disadvantages of each storage option.</li> <li>Monitoring and adjusting resource allocation as needed.</li> </ul>"},{"location":"Domain%204/#amazon-s3-for-cost-effective-storage","title":"Amazon S3 for Cost-Effective Storage:","text":"<ul> <li>S3 as a low-cost storage option with global accessibility.</li> <li>11 nines of durability and flexible data lifecycle policies.</li> <li>Different storage classes with varying durability, availability, and pricing.</li> <li>Transitioning objects based on time and optimizing access tiers.</li> </ul>"},{"location":"Domain%204/#monitoring-and-cost-management","title":"Monitoring and Cost Management:","text":"<ul> <li>Importance of monitoring cost and usage.</li> <li>Utilizing AWS services like CloudWatch, Trusted Advisor, Well-Architected Framework Tool, and Cost Explorer.</li> <li>Defining metrics, setting goals, and enforcing tagging strategies.</li> <li>Use of cost allocation tags and billing alarms.</li> <li>AWS Organizations and Control Tower for centralized billing management.</li> <li>AWS Auto-Scaling and EC2 Auto-Scaling to match resource demand.</li> </ul>"},{"location":"Domain%204/#optimizing-ebs-volumes","title":"Optimizing EBS Volumes:","text":"<ul> <li>Trusted Advisor recommendations for underutilized EBS volumes.</li> <li>Baseline establishment for right-sizing volumes.</li> <li>Monitoring IOPS usage and optimizing volume type for cost savings.</li> <li>Utilizing data lifecycle rules for automated data deletion.</li> </ul>"},{"location":"Domain%204/#s3-storage-optimization","title":"S3 Storage Optimization:","text":"<ul> <li>Using different storage classes based on requirements.</li> <li>Understanding tradeoffs between storage costs and retrieval times.</li> <li>Leveraging S3 capabilities like Lifecycle Configuration and Intelligent Tiering.</li> </ul>"},{"location":"Domain%204/#data-migration-cost-optimization","title":"Data Migration Cost Optimization:","text":"<ul> <li>Options for optimizing data migration costs in hybrid environments.</li> <li>AWS Snowmobile, Direct Connect, Snowball devices, and dedicated lines for data transfer.</li> <li>Architecting for data transfer to minimize costs using CDNs or dedicated network links.</li> </ul>"},{"location":"Domain%204/#requester-pays-bucket-in-s3","title":"Requester-Pays Bucket in S3:","text":"<ul> <li>Configuring S3 buckets for requesters to pay the cost of requests and data downloads.</li> </ul>"},{"location":"Domain%204/#summary-questions","title":"Summary Questions:","text":"<ul> <li>Identifying correct S3 capabilities like S3 Lifecycle Configuration and Intelligent Tiering.</li> <li>Optimizing data migration cost for large data transfers using Snowball and other AWS services.</li> </ul>"},{"location":"Domain%204/#task-statement-2-design-cost-optimized-compute-solutions","title":"Task Statement 2: Design cost-optimized compute solutions.","text":""},{"location":"Domain%204/#key-to-cost-savings","title":"Key to Cost Savings","text":"<ul> <li>Using appropriate instances and resources for workload</li> <li>Leveraging managed services to reduce server maintenance costs</li> </ul>"},{"location":"Domain%204/#aws-pricing-options","title":"AWS Pricing Options","text":"<ul> <li>On-demand instances</li> <li>Saving plans</li> <li>Reserved instances</li> <li>Spot instances for dynamic workloads</li> <li>Appropriate service selection to reduce usage and costs (e.g., CloudFront, Aurora, RDS)</li> </ul>"},{"location":"Domain%204/#considerations-for-compute-service-selection","title":"Considerations for Compute Service Selection","text":"<ul> <li>Evaluating costs based on resource size, pricing models, and data transfer costs</li> </ul>"},{"location":"Domain%204/#right-sizing","title":"Right-sizing","text":"<ul> <li>Selecting the cheapest instance type that meets performance requirements</li> <li>Choosing the right instance family for workload (compute, memory, etc.)</li> </ul>"},{"location":"Domain%204/#hybrid-compute-options","title":"Hybrid Compute Options","text":"<ul> <li>Understanding cost calculations and optimization for services like Outpost and Snowball Edge</li> <li>Advantages of edge computing, e.g., CloudFront, IoT solutions</li> </ul>"},{"location":"Domain%204/#elasticity","title":"Elasticity","text":"<ul> <li>Using resources only when needed to achieve a pay-for-what-you-use model</li> <li>Scaling down instances with auto scaling during non-business hours</li> </ul>"},{"location":"Domain%204/#choosing-the-right-pricing-model","title":"Choosing the Right Pricing Model","text":"<ul> <li>Understanding various Amazon EC2 pricing options (On-Demand, Savings Plans, Reserved Instances, Spot Instances, etc.)</li> <li>Selecting the best plan based on workload characteristics</li> </ul>"},{"location":"Domain%204/#matching-storage-to-usage","title":"Matching Storage to Usage","text":"<ul> <li>Right-sizing storage for compute environments</li> <li>Aligning storage choices with workload needs</li> </ul>"},{"location":"Domain%204/#continual-improvement","title":"Continual Improvement","text":"<ul> <li>Measuring and monitoring architecture usage and cost</li> <li>Utilizing CloudWatch, Cost Explorer, and other tools</li> <li>Enforcing tagging strategy and regularly reviewing infrastructure changes</li> </ul>"},{"location":"Domain%204/#load-balancers-for-scalability","title":"Load Balancers for Scalability","text":"<ul> <li>Understanding different load balancer types (Application, Network, Gateway)</li> <li>Integrating load balancers with auto scaling groups</li> <li>Configuring health checks and alarms for auto scaling groups to ensure instance health</li> </ul>"},{"location":"Domain%204/#task-statement-3-design-cost-optimized-database-solutions","title":"Task Statement 3: Design cost-optimized database solutions.","text":""},{"location":"Domain%204/#strategies-for-reducing-database-costs-and-improving-availability","title":"Strategies for Reducing Database Costs and Improving Availability","text":"<ul> <li>Know AWS storage services and the type of data required.</li> <li>Consider various data stores, not just relational database management systems (RDS), to avoid performance issues and reduce costs.</li> <li>Assess access patterns, expected scale and growth, and data access frequency when choosing a data store.</li> <li>Migration options include moving subsets of data to EC2, RDS, S3, or a NoSQL data store like DynamoDB.</li> </ul>"},{"location":"Domain%204/#considerations-for-data-store-selection","title":"Considerations for Data Store Selection","text":"<ul> <li>Evaluate whether data processing and storage rely on database-specific features.</li> <li>Determine if table and entity definitions in the database schema will remain fixed.</li> <li>Decide whether constraints need to be enforced across different tables in the data model.</li> <li>Moving data to DynamoDB can offload administrative burdens and scaling concerns.</li> </ul>"},{"location":"Domain%204/#database-service-selection","title":"Database Service Selection","text":"<ul> <li>Choose the right database service for your use case, considering cost-effectiveness (e.g., Aurora Serverless vs. Aurora).</li> </ul>"},{"location":"Domain%204/#scaling-strategies","title":"Scaling Strategies","text":"<ul> <li>Optimize storage by using automatic scaling for RDS databases.</li> <li>Consider horizontal scaling or adding read replicas/caches to meet performance demands and control costs.</li> <li>Deep knowledge of scaling mechanisms for AWS Database Services and Compute Services is essential.</li> </ul>"},{"location":"Domain%204/#backup-and-recovery-planning","title":"Backup and Recovery Planning","text":"<ul> <li>Design backup plans to meet Recovery Point Objectives (RPO) with the appropriate frequency.</li> <li>Understand which AWS managed database services support point-in-time recovery.</li> <li>Set retention policies to eliminate unnecessary storage costs.</li> </ul>"},{"location":"Domain%204/#rds-engine-selection","title":"RDS Engine Selection","text":"<ul> <li>Understand the different types of RDS engines and their suitability for specific use cases.</li> </ul>"},{"location":"Domain%204/#use-of-managed-services","title":"Use of Managed Services","text":"<ul> <li>Utilize managed services whenever possible to reduce operational burdens and lower the cost per transaction or service.</li> </ul>"},{"location":"Domain%204/#task-statement-4-design-cost-optimized-network-architectures","title":"Task Statement 4: Design cost-optimized network architectures.","text":""},{"location":"Domain%204/#aws-networking-overview","title":"AWS Networking Overview:","text":"<ul> <li>AWS networking is virtualized and managed.</li> <li>No need to manage physical network equipment.</li> <li>Networking resources are paid for based on usage.</li> <li>Consider API calls and data transfer costs.</li> </ul>"},{"location":"Domain%204/#hybrid-networking","title":"Hybrid Networking:","text":"<ul> <li>Efficient use of networking resources is crucial for cost optimization.</li> <li>Different options for connecting AWS to on-premises environments (e.g., VPN vs. Direct Connect).</li> <li>Choose cost-effective solutions based on throughput and security requirements.</li> </ul>"},{"location":"Domain%204/#connectivity-to-aws-resources","title":"Connectivity to AWS Resources:","text":"<ul> <li>Different methods of connecting to AWS resources have cost implications.</li> <li>Consider costs when choosing methods like SSH, RDP, AWS Systems Manager Session Manager, and EC2 instance Connect.</li> </ul>"},{"location":"Domain%204/#vpc-and-cross-region-connectivity","title":"VPC and Cross-Region Connectivity:","text":"<ul> <li>Understand the cost implications of VPC peering vs. transit gateways.</li> <li>Data transfer charges for cross-Region data transfers.</li> <li>Optimize connectivity services for cost-effectiveness.</li> </ul>"},{"location":"Domain%204/#data-transfer-costs","title":"Data Transfer Costs:","text":"<ul> <li>Understand how data transfer costs work in AWS.</li> <li>Use VPC gateway endpoints for data transfer within the same Region.</li> <li>Minimize costs for NAT Gateways and transit gateways.</li> </ul>"},{"location":"Domain%204/#throttling-and-api-gateway-usage","title":"Throttling and API Gateway Usage:","text":"<ul> <li>Set up throttling strategies for workloads using API Gateway.</li> <li>Use API Gateway usage plans and API keys to control access and requests.</li> </ul>"},{"location":"Domain%204/#network-bandwidth-and-failover","title":"Network Bandwidth and Failover:","text":"<ul> <li>Choose appropriate bandwidth options for network design.</li> <li>Consider cost-effective failover options like site-to-site VPN over separate Direct Connect connections.</li> </ul>"},{"location":"Domain%204/#s3-cost-optimization","title":"S3 Cost Optimization:","text":"<ul> <li>Costs associated with data storage, API calls, and data transfer in S3.</li> <li>Optimize costs by reducing API calls and using content delivery services like CloudFront.</li> </ul>"},{"location":"Domain%204/#cloudfront-for-cost-optimization","title":"CloudFront for Cost Optimization:","text":"<ul> <li>CloudFront reduces data transfer costs and can improve performance.</li> <li>Use CloudFront for regional Edge caches and reducing data transfer from origins.</li> <li>Explore various use cases for CloudFront beyond S3 bucket fronting.</li> </ul>"},{"location":"Domain%204/#monitoring-and-configuration-management","title":"Monitoring and Configuration Management:","text":"<ul> <li>AWS provides monitoring and config management tools (e.g., CloudWatch, Health Dashboard, VPC Reachability Analyzer, Config, Route Analyzer).</li> <li>Review workloads for cost reduction opportunities.</li> <li>Consider historical cost patterns, Availability Zones, Region costs, and AWS free tier offerings.</li> </ul>"},{"location":"Domain%205/","title":"Index","text":"<p>bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre></p> yamljsonOrdered list <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> Unordered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"}]}